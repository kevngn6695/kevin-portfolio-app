{"version":3,"sources":["webpack://src/Assets/SASS/home.scss","webpack://src/Assets/SASS/include-media.scss","webpack://src/Assets/SASS/footer.scss","webpack://src/Assets/SASS/font-face.scss","webpack://src/Assets/SASS/navbar.scss"],"names":[],"mappings":"AAEA,MACI,iBAAA,CACA,kBAAA,CACA,kDAAA,CAOJ,EACI,QAAA,CACA,SAAA,CACA,qBAAA,CAGJ,2BAEI,iFAAA,CAGA,kBAAA,CAGJ,0CAGI,iBAAA,CACA,eAAA,CAEJ,gBACI,gCAAA,CACA,eAAA,CACA,+CAAA,CAAA,4BAAA,CACA,YAAA,CACA,kBAAA,CACA,sBAAA,CAEA,2BACI,YAAA,CACA,WAAA,CACA,SAAA,CACA,iFAAA,CAGA,kBAAA,CACA,SAAA,CACA,WAAA,CACA,kCAAA,CAAA,0BAAA,CACA,YAAA,CACA,oCAAA,CCmgBA,6CD/gBJ,2BAcQ,eAAA,CAAA,CAEJ,0CACI,UAAA,CACA,WAAA,CACA,YAAA,CACA,sBAAA,CACA,UAAA,CAEA,uDACI,SAAA,CACA,YAAA,CACA,SAAA,CAGJ,wDACI,SAAA,CACA,OAAA,CACA,SAAA,CACA,YAAA,CAIZ,yBACI,iFAAA,CAGA,iBAAA,CACA,iBAAA,CACA,SAAA,CAGR,QACI,UAAA,CACA,WAAA,CACA,qBAAA,CElEA,kBACI,cACA,CAAA,UAAA,CACA,iBAAA,CACA,QAAA,CAAA,mBAAA,CAAA,6BAAA,wBAAA,CAAA,cAAA,CAAA,iBAAA,CAAA,UAAA,CC3BR,WACI,gBAAA,CACA,gDAGJ,CAAA,WACI,iBACA,CAAA,iDAGJ,CACI,WAAA,kBACA,CAAA,gDAIA,CAAA,WAAA,uBACA,CAAA,wDAIA,CAAA,WACA,sBAAA,CAAA,4DAKA,CAAA,WAAA,oBAGJ,CAAA,8DAEI,CAAA,WAAA,wBAIA,CAAA,iEAIJ,CAAA,WACI,uBACA,CAAA,sDAIA,CAAA,WACA,kBAAA,CAAA,kDCzCA,CAAA,WACA,sBAAA,CAAA,sDAEA,CAAA,MAAA,2BACA,CAAA,6BACA,CAAA,+BACA,CAAA,yCACA,CAAA,2BAAA,CAAA,sCACA,CAAA,yCAMA,CAAA,+BAEA,CAAA,uCAEA,CAAA,KAAA,UAEA,CAAA,cAAA,CAAA,iBAIA,CAAA,YAAA,CAAA,kBACI,CAAA,6BAEA,CAAA,gBACA,CAAA,qBAEA,WAAA,CAAA,0BACI,iBACA,CACA,YAAA,CAAA,UACA,CAAA,oBACA,CAAA,oCAAA,oBAKR,CAAA,aACI,CACA,cACA,CAAA,cACA,CAAA,wBAKR,CAAA,+BACI,CAAA,iBAEA,UAAA,CAAA,WACA,CAAA,UACA,CAAA,iBAAA,CAAA,aAAA,CAAA,wBAEA,UAAA,CAAA,WAAA,CAAA,gBACI,CAAA,kBACA,CAAA,mCAQJ,CAAA,cACA,CAAA,8BAMI,qBAAA,CAAA,cAAA,CAAA,YACA,WAAA,CAAA,eAEA,CAAA,cACA,CAAA,UACA,gpCACA,CAAA,qBAAA,oBAAA,CAAA,UAAA,CAAA,WAAA,CAAA,UAAA,CAAA,2BAAA,CAAA,cAAA,CAAA,WAAA,43FAAA,CAAA,UAAA,giEAAA,CAAA,mBAAA,oBAAA,CAAA,UAAA,CAAA,WAAA,CAAA,UAAA,CAAA,2BAAA,CAAA,cAAA,CAAA,SAAA,gxEAAA","file":"main.78a829a3.chunk.css","sourcesContent":["@import './include-media.scss';\r\n\r\n:root {\r\n    --full-width: 100%;\r\n    --full-height: 100%;\r\n    --home-color: linear-gradient(to top, #ff7708 0%, white 100%);\r\n}\r\n$tablet-size: 768px;\r\n$phone-size: 320px;\r\n$desktop-size: 1024px;\r\n$breakpoints: (phone: $phone-size, tablet: $tablet-size, desktop: $desktop-size);\r\n\r\n* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\n.pad-wrapper,\r\n.pad-wrapper1 {\r\n    background: linear-gradient(to right bottom,\r\n            rgba(255, 255, 255, 0.8),\r\n            rgba(255, 255, 255, 0.5));\r\n    border-radius: 40px;\r\n}\r\n\r\n.pad-container,\r\n.pad-wrapper,\r\n.pad-wrapper1 {\r\n    position: absolute;\r\n    list-style: none;\r\n}\r\n.home-container {\r\n    font-family: \"Poppins\", sans-serif;\r\n    min-height: 25vh;\r\n    background: var(--home-color);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    \r\n    .container {\r\n        height:516px;\r\n        margin: 50px;\r\n        width: 60%;\r\n        background: linear-gradient(to right bottom,\r\n                rgba(255, 255, 255, 0.1),\r\n                rgba(255, 255, 255, 0.2));\r\n        border-radius: 2rem;\r\n        z-index: 2;\r\n        border: none;\r\n        backdrop-filter: blur(2rem);\r\n        display: flex;\r\n        box-shadow: 0 0 1rem 0 rgba(0, 0, 0, 0.2);\r\n        @include media(\"<phone\", \">=tablet\") {\r\n            background: white;\r\n        }\r\n        .pad-container {\r\n            width: 100%;\r\n            height: 100%;\r\n            display: flex;\r\n            justify-content: center;\r\n            z-index: -1;\r\n\r\n            .pad-wrapper {\r\n                width: 90%;\r\n                height: 150px;\r\n                top: 100px;\r\n            }\r\n\r\n            .pad-wrapper1 {\r\n                width: 90%;\r\n                left: 5%;\r\n                top: 270px;\r\n                height: 170px;\r\n            }\r\n        }\r\n    }\r\n    .bubbles {\r\n        background: linear-gradient(to right bottom,\r\n                rgba(255, 255, 255, 0.4),\r\n                rgba(255, 255, 255, 0.2));\r\n        border-radius: 50%;\r\n        position: absolute;\r\n        z-index: 3;\r\n    }\r\n}\r\n.layout {\r\n    width: 100%;\r\n    height: 100%;\r\n    border: 1px solid black;\r\n}\r\n","@charset \"UTF-8\";\r\n\r\n//     _            _           _                           _ _\r\n//    (_)          | |         | |                         | (_)\r\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\r\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\r\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\r\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\r\n//\r\n//      Simple, elegant and maintainable media queries in Sass\r\n//                        v1.4.9\r\n//\r\n//        https://eduardoboucas.github.io/include-media\r\n//\r\n//         Authors: Eduardo Boucas (@eduardoboucas)\r\n//                  Hugo Giraudel (@hugogiraudel)\r\n//\r\n//      This project is licensed under the terms of the MIT license\r\n////\r\n/// include-media library public configuration\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n\r\n///\r\n/// Creates a list of global breakpoints\r\n///\r\n/// @example scss - Creates a single breakpoint with the label `phone`\r\n///  $breakpoints: ('phone': 320px);\r\n///\r\n$breakpoints: ('phone': 320px,\r\n    'tablet': 768px,\r\n    'desktop': 1024px) !default;\r\n\r\n\r\n///\r\n/// Creates a list of static expressions or media types\r\n///\r\n/// @example scss - Creates a single media type (screen)\r\n///  $media-expressions: ('screen': 'screen');\r\n///\r\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n///  $media-expressions: (\r\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\r\n///  );\r\n///\r\n$media-expressions: ('screen': 'screen',\r\n    'print': 'print',\r\n    'handheld': 'handheld',\r\n    'landscape': '(orientation: landscape)',\r\n    'portrait': '(orientation: portrait)',\r\n    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\r\n    'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\r\n) !default;\r\n\r\n\r\n///\r\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n///\r\n/// @example scss - Interval for pixels is defined as `1` by default\r\n///  @include media('>128px') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 129px) {}\r\n///\r\n/// @example scss - Interval for ems is defined as `0.01` by default\r\n///  @include media('>20em') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 20.01em) {}\r\n///\r\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n///  @include media('>2.0rem') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 2.1rem) {}\r\n///\r\n$unit-intervals: ('px': 1,\r\n    'em': 0.01,\r\n    'rem': 0.1,\r\n    '': 0) !default;\r\n\r\n///\r\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\r\n/// for browsers that don't support media queries.\r\n///\r\n/// @example scss - Disables support for media queries\r\n///  $im-media-support: false;\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n$im-media-support: true !default;\r\n\r\n///\r\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\r\n/// intercept the breakpoint will be displayed, any others will be ignored.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'tablet';\r\n///  @include media('>=desktop') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-breakpoint: 'desktop' !default;\r\n\r\n///\r\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\r\n/// are not supported.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'screen') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///   /* Generates: */\r\n///   .foo {\r\n///     color: tomato;\r\n///   }\r\n///\r\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'retina2x') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\r\n\r\n////\r\n/// Cross-engine logging engine\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Log a message either with `@error` if supported\r\n/// else with `@warn`, using `feature-exists('at-error')`\r\n/// to detect support.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@function im-log($message) {\r\n    @if feature-exists('at-error') {\r\n        @error $message;\r\n    }\r\n\r\n    @else {\r\n        @warn $message;\r\n        $_: noop();\r\n    }\r\n\r\n    @return $message;\r\n}\r\n\r\n\r\n///\r\n/// Wrapper mixin for the log function so it can be used with a more friendly\r\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\r\n/// within functions because it is not possible to include a mixin in a function\r\n/// and use the mixin everywhere else because it's much more elegant.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@mixin log($message) {\r\n    @if im-log($message) {}\r\n}\r\n\r\n\r\n///\r\n/// Function with no `@return` called next to `@warn` in Sass 3.3\r\n/// to trigger a compiling error and stop the process.\r\n///\r\n@function noop() {}\r\n\r\n///\r\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\r\n///\r\n@function im-intercepts-static-breakpoint($conditions...) {\r\n    $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\r\n\r\n    @if not $no-media-breakpoint-value {\r\n        @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\r\n    }\r\n\r\n    @each $condition in $conditions {\r\n        @if not map-has-key($media-expressions, $condition) {\r\n            $operator: get-expression-operator($condition);\r\n            $prefix: get-expression-prefix($operator);\r\n            $value: get-expression-value($condition, $operator);\r\n\r\n            @if ($prefix=='max'and $value <=$no-media-breakpoint-value) or ($prefix=='min'and $value > $no-media-breakpoint-value) {\r\n                @return false;\r\n            }\r\n        }\r\n\r\n        @else if not index($im-no-media-expressions, $condition) {\r\n            @return false;\r\n        }\r\n    }\r\n\r\n    @return true;\r\n}\r\n\r\n////\r\n/// Parsing engine\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Get operator of an expression\r\n///\r\n/// @param {String} $expression - Expression to extract operator from\r\n///\r\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\r\n///\r\n@function get-expression-operator($expression) {\r\n    @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\r\n        @if str-index($expression, $operator) {\r\n            @return $operator;\r\n        }\r\n    }\r\n\r\n    // It is not possible to include a mixin inside a function, so we have to\r\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n    // functions cannot be called anywhere in Sass, we need to hack the call in\r\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n    $_: im-log('No operator found in `#{$expression}`.');\r\n}\r\n\r\n\r\n///\r\n/// Get dimension of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract dimension from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {String} - `width` or `height` (or potentially anything else)\r\n///\r\n@function get-expression-dimension($expression, $operator) {\r\n    $operator-index: str-index($expression, $operator);\r\n    $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\r\n    $dimension: 'width';\r\n\r\n    @if str-length($parsed-dimension)>0 {\r\n        $dimension: $parsed-dimension;\r\n    }\r\n\r\n    @return $dimension;\r\n}\r\n\r\n\r\n///\r\n/// Get dimension prefix based on an operator\r\n///\r\n/// @param {String} $operator - Operator\r\n///\r\n/// @return {String} - `min` or `max`\r\n///\r\n@function get-expression-prefix($operator) {\r\n    @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\r\n}\r\n\r\n\r\n///\r\n/// Get value of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract value from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {Number} - A numeric value\r\n///\r\n@function get-expression-value($expression, $operator) {\r\n    $operator-index: str-index($expression, $operator);\r\n    $value: str-slice($expression, $operator-index + str-length($operator));\r\n\r\n    @if map-has-key($breakpoints, $value) {\r\n        $value: map-get($breakpoints, $value);\r\n    }\r\n\r\n    @else {\r\n        $value: to-number($value);\r\n    }\r\n\r\n    $interval: map-get($unit-intervals, unit($value));\r\n\r\n    @if not $interval {\r\n        // It is not possible to include a mixin inside a function, so we have to\r\n        // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n        // functions cannot be called anywhere in Sass, we need to hack the call in\r\n        // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n        // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n        $_: im-log('Unknown unit `#{unit($value)}`.');\r\n    }\r\n\r\n    @if $operator=='>' {\r\n        $value: $value + $interval;\r\n    }\r\n\r\n    @else if $operator=='<' {\r\n        $value: $value - $interval;\r\n    }\r\n\r\n    @return $value;\r\n}\r\n\r\n\r\n///\r\n/// Parse an expression to return a valid media-query expression\r\n///\r\n/// @param {String} $expression - Expression to parse\r\n///\r\n/// @return {String} - Valid media query\r\n///\r\n@function parse-expression($expression) {\r\n\r\n    // If it is part of $media-expressions, it has no operator\r\n    // then there is no need to go any further, just return the value\r\n    @if map-has-key($media-expressions, $expression) {\r\n        @return map-get($media-expressions, $expression);\r\n    }\r\n\r\n    $operator: get-expression-operator($expression);\r\n    $dimension: get-expression-dimension($expression, $operator);\r\n    $prefix: get-expression-prefix($operator);\r\n    $value: get-expression-value($expression, $operator);\r\n\r\n    @return '(#{$prefix}-#{$dimension}: #{$value})';\r\n}\r\n\r\n///\r\n/// Slice `$list` between `$start` and `$end` indexes\r\n///\r\n/// @access private\r\n///\r\n/// @param {List} $list - List to slice\r\n/// @param {Number} $start [1] - Start index\r\n/// @param {Number} $end [length($list)] - End index\r\n///\r\n/// @return {List} Sliced list\r\n///\r\n@function slice($list, $start: 1, $end: length($list)) {\r\n    @if length($list) < 1 or $start>$end {\r\n        @return ();\r\n    }\r\n\r\n    $result: ();\r\n\r\n    @for $i from $start through $end {\r\n        $result: append($result, nth($list, $i));\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n////\r\n/// String to number converter\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Casts a string into a number\r\n///\r\n/// @param {String | Number} $value - Value to be parsed\r\n///\r\n/// @return {Number}\r\n///\r\n@function to-number($value) {\r\n    @if type-of($value)=='number' {\r\n        @return $value;\r\n    }\r\n\r\n    @else if type-of($value) !='string' {\r\n        $_: im-log('Value for `to-number` should be a number or a string.');\r\n    }\r\n\r\n    $first-character: str-slice($value, 1, 1);\r\n    $result: 0;\r\n    $digits: 0;\r\n    $minus: ($first-character=='-');\r\n    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\r\n\r\n    // Remove +/- sign if present at first character\r\n    @if ($first-character=='+'or $first-character=='-') {\r\n        $value: str-slice($value, 2);\r\n    }\r\n\r\n    @for $i from 1 through str-length($value) {\r\n        $character: str-slice($value, $i, $i);\r\n\r\n        @if not (index(map-keys($numbers), $character) or $character=='.') {\r\n            @return to-length(if($minus, -$result, $result), str-slice($value, $i))\r\n        }\r\n\r\n        @if $character=='.' {\r\n            $digits: 1;\r\n        }\r\n\r\n        @else if $digits==0 {\r\n            $result: $result * 10 + map-get($numbers, $character);\r\n        }\r\n\r\n        @else {\r\n            $digits: $digits * 10;\r\n            $result: $result + map-get($numbers, $character) / $digits;\r\n        }\r\n    }\r\n\r\n    @return if($minus, -$result, $result);\r\n}\r\n\r\n\r\n///\r\n/// Add `$unit` to `$value`\r\n///\r\n/// @param {Number} $value - Value to add unit to\r\n/// @param {String} $unit - String representation of the unit\r\n///\r\n/// @return {Number} - `$value` expressed in `$unit`\r\n///\r\n@function to-length($value, $unit) {\r\n    $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\r\n\r\n    @if not index(map-keys($units), $unit) {\r\n        $_: im-log('Invalid unit `#{$unit}`.');\r\n    }\r\n\r\n    @return $value * map-get($units, $unit);\r\n}\r\n\r\n///\r\n/// This mixin aims at redefining the configuration just for the scope of\r\n/// the call. It is helpful when having a component needing an extended\r\n/// configuration such as custom breakpoints (referred to as tweakpoints)\r\n/// for instance.\r\n///\r\n/// @author Hugo Giraudel\r\n///\r\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\r\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\r\n///\r\n/// @example scss - Extend the global breakpoints with a tweakpoint\r\n///  @include media-context(('custom': 678px)) {\r\n///    .foo {\r\n///      @include media('>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend the global media expressions with a custom one\r\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend both configuration maps\r\n///  @include media-context(('custom': 678px), ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\r\n    // Save global configuration\r\n    $global-breakpoints: $breakpoints;\r\n    $global-media-expressions: $media-expressions;\r\n\r\n    // Update global configuration\r\n    $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\r\n    $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\r\n\r\n    @content;\r\n\r\n    // Restore global configuration\r\n    $breakpoints: $global-breakpoints !global;\r\n    $media-expressions: $global-media-expressions !global;\r\n}\r\n\r\n////\r\n/// include-media public exposed API\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n\r\n///\r\n/// Generates a media query based on a list of conditions\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @example scss - With a single set breakpoint\r\n///  @include media('>phone') { }\r\n///\r\n/// @example scss - With two set breakpoints\r\n///  @include media('>phone', '<=tablet') { }\r\n///\r\n/// @example scss - With custom values\r\n///  @include media('>=358px', '<850px') { }\r\n///\r\n/// @example scss - With set breakpoints with custom values\r\n///  @include media('>desktop', '<=1350px') { }\r\n///\r\n/// @example scss - With a static expression\r\n///  @include media('retina2x') { }\r\n///\r\n/// @example scss - Mixing everything\r\n///  @include media('>=350px', '<tablet', 'retina3x') { }\r\n///\r\n@mixin media($conditions...) {\r\n    @if ($im-media-support and length($conditions)==0) or (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\r\n        @content;\r\n    }\r\n\r\n    @else if ($im-media-support and length($conditions) > 0) {\r\n        @media #{unquote(parse-expression(nth($conditions, 1)))} {\r\n\r\n            // Recursive call\r\n            @include media(slice($conditions, 2)...) {\r\n                @content;\r\n            }\r\n        }\r\n    }\r\n}","@import './font-face.scss';\r\n\r\n:root {\r\n    --abel-cursive: Abel, cursive;\r\n    --anton-cursive: Anton, cursive;\r\n    --apercu-cursive: Apercu, cursive;\r\n    --gt-walsheim-cursive: GT Walsheim, cursive;\r\n    --jeko-cursive: Jeko, cursive;\r\n    --josefin-sans-cursive: Josefin, cursive;\r\n    --lexend-deca-cursive: Lexend Deca, cursive;\r\n    --livvic-cursive: Livvic, cursive;\r\n    --montserrat-cursive: Montserrat, cursive;\r\n\r\n\r\n}\r\n\r\n.footer-container {\r\n    position: fixed;\r\n    width: 100%;\r\n    position: absolute;\r\n    bottom: 0;\r\n    padding-bottom: 15px;\r\n\r\n    .copyright {\r\n        font-family: Abel, cursive;\r\n        font-size: 12px;\r\n        text-align: center;\r\n        color: white;\r\n    }\r\n}\r\n","@font-face {\r\n    font-family: Abel;\r\n    src: url(\"../Fonts/Abel/Abel-Regular.ttf\");\r\n}\r\n\r\n@font-face {\r\n    font-family: Anton;\r\n    src: url(\"../Fonts/Anton/Anton-Regular.ttf\");\r\n}\r\n\r\n@font-face {\r\n    font-family: Apercu;\r\n    src: url(\"../Fonts/Apercu/Apercu-Light.ttf\");\r\n}\r\n\r\n@font-face {\r\n    font-family: GT Walsheim;\r\n    src: url(\"../Fonts/GT_Walsheim/GTWalsheimProRegular.ttf\");\r\n}\r\n\r\n@font-face {\r\n    font-family: Jeko Light;\r\n    src: url(\"../Fonts/Jeko/FontsFree-Net-Jeko-Light.ttf\");\r\n}\r\n\r\n@font-face {\r\n    font-family: Jeko Pro;\r\n    src: url(\"../Fonts/Jeko/FontsFree-Net-Jeko-Regular.ttf\");\r\n}\r\n\r\n@font-face {\r\n    font-family: Josefin Sans;\r\n    src: url(\"../Fonts/Josefin_Sans/JosefinSans-VariableFont_wght.ttf\");\r\n}\r\n\r\n@font-face {\r\n    font-family: Lexend Deca;\r\n    src: url(\"../Fonts/Lexend_Deca/LexendDeca-Regular.ttf\");\r\n}\r\n\r\n@font-face {\r\n    font-family: Livvic;\r\n    src: url(\"../Fonts/Livvic/Livvic-Regular.ttf\");\r\n}\r\n\r\n@font-face {\r\n    font-family: Montserrat;\r\n    src: url(\"../Fonts/Montserrat/Montserrat-Regular.ttf\");\r\n}\r\n","@import './font-face.scss';\r\n\r\n$size: 15px;\r\n$social-media-icons: (\"facebook\": $size, \"instagram\": $size, \"linkedin\": $size, \"youtube\": $size);\r\n\r\n:root {\r\n    --abel-cursive: Abel, cursive;\r\n    --anton-cursive: Anton, cursive;\r\n    --apercu-cursive: Apercu, cursive;\r\n    --gt-walsheim-cursive: GT Walsheim, cursive;\r\n    --jeko-cursive: Jeko, cursive;\r\n    --josefin-sans-cursive: Josefin, cursive;\r\n    --lexend-deca-cursive: Lexend Deca, cursive;\r\n    --livvic-cursive: Livvic, cursive;\r\n    --montserrat-cursive: Montserrat, cursive;\r\n}\r\n\r\n.nav {\r\n    width: 100%;\r\n    min-height: 5vh;\r\n    position: absolute;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content:space-between;\r\n    padding-top: 15px;\r\n\r\n    .list-container{\r\n        padding:5px;\r\n    }\r\n\r\n    .list-container-item {\r\n        text-align: center;\r\n        padding: 10px;\r\n        float: left;\r\n        list-style-type: none;\r\n    \r\n        .nav-link {\r\n            text-decoration: none;\r\n            color: #0f0f0f;\r\n            font-size: 14px;\r\n            padding: 0 10px;\r\n            font-family: var(--abel-cursive);\r\n        \r\n        }\r\n    }\r\n    \r\n    .logo-image {\r\n        width: 50px;\r\n        height: 50px;\r\n        float: left;\r\n        border-radius: 50%;\r\n        margin: 0 20px;\r\n    }\r\n}\r\n\r\n.list-container-wrapper{\r\n    width: 100%;\r\n    height: 25px;\r\n    line-height: 20px;\r\n    border-radius: 40px;\r\n    border: 1px solid rgba(255, 255, 255, 0.1);\r\n    transition: 0.6s;\r\n    &:hover{\r\n        border: 1px solid black;\r\n        transition: 0.3s;\r\n    }\r\n}\r\n\r\n\r\n\r\n.media-list {\r\n    width: 100px;\r\n    min-height: 50px;\r\n    padding: 20px 0;\r\n}\r\n\r\n@each $name,\r\n$iconSize in $social-media-icons {\r\n    .#{$name} {\r\n        background-image: url('../Media/Icons/#{$name}-128.png');\r\n        background-size: $iconSize;\r\n        width: $iconSize;\r\n        height: $iconSize;\r\n        float: left;\r\n        background-repeat: no-repeat;\r\n        margin: 0 0.1rem;\r\n\r\n        \r\n        \r\n    }\r\n\r\n\r\n}"]}